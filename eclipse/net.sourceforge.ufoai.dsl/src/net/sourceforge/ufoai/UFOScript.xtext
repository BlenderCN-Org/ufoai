grammar net.sourceforge.ufoai.UFOScript with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate ufoScript "http://ufoai.org/UFOScript"

// starting point for parsing a ufo script file
UFOScript:
	(blocks+=TopLevelNode*);

TopLevelNode:
	UITopLevelNode | Aircraft | Tech | Building | Item | Equipment | Sprite | Particle | Tips | Chrtemplate | Team |
	Terrain | Sequence | MapDef;

/* ==================== UI TOP LEVEL NODES ================================ */
UITopLevelNode:
	UINodeComponent | UINodeWindow | UIFont;

/** a window can only extend another window */
UINodeWindow:
	"window" name=UINodeID ("extends" superWindow=[UINodeWindow])? "{"
	/* optional block with window properties that might be empty */
	("{" (properties+=UIPropertyDefinition)* "}")?
	/* nodes */
	(nodes+=UINode)*
	"}";

/** components can extend any ui node */
UINodeComponent:
	"component" name=UINodeID "extends" ((superComponent=[UINodeComponent]) | (type=UINodeType)) "{"
	("{" (properties+=UIPropertyDefinition)* "}")?
	(properties+=UIPropertyDefinition)*
	(nodes+=UINode)*
	"}";

/* ==================== NODES ================================ */
UINodeType:
	"panel" | "image" | "button" | "model" | "text" | "string" | "confunc" | "func" | "textentry" | "baseinventory" |
	"baselayout" | "bar" | "basemaps" | "checkbox" | "battlescape" | "controls" | "data" | "cvarlistener" | "container" |
	"ekg" | "editor" | "item" | "geoscape" | "linechart" | "keybinding" | "messagelist" | "material_editor" |
	"optionlist" | "option" | "radar" | "optiontree" | "rows" | "radiobutton" | "sequence" | "selectbox" | "tab" |
	"spinner" | "text2" | "tbar" | "texture" | "textlist" | "todo" | "timer" | "video" | "zone" | "vscrollbar";

UINode:
	UINodePanel | UINodeImage | UINodeButton | UINodeModel | UINodeText | UINodeString | UINodeConfunc | UINodeFunc |
	UINodeTextEntry | UINodeBaseinventory | UINodeBar | UINodeBasemap | UINodeBaselayout | UINodeCheckbox |
	UINodeBattlescape | UINodeControls | UINodeContainer | UINodeData | UINodeCvarlistener | UINodeEkg | UINodeEditor |
	UINodeItem | UINodeGeoscape | UINodeLinechart | UINodeKeybinding | UINodeMessagelist | UINodeMaterial_Editor |
	UINodeOptionlist | UINodeOption | UINodeRadar | UINodeOptiontree | UINodeRows | UINodeRadiobutton | UINodeSequence |
	UINodeSelectbox | UINodeTab | UINodeSpinner | UINodeText2 | UINodeTbar | UINodeTexture | UINodeTextlist | UINodeTodo |
	UINodeTimer | UINodeVideo | UINodeZone | UINodeVscrollbar;

UINodePanel:
	"panel" name=UINodeID "{" ("{" (properties+=UIPropertyDefinition)* "}")? (panelNodes+=UINode)* "}";

UINodeImage:
	"image" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeButton:
	"button" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeModel:
	"model" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeText:
	"text" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeString:
	"string" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeConfunc:
	"confunc" name=UINodeID "{" (statements+=UIFuncStatements)* "}";

UINodeFunc:
	"func" name=UINodeID "{" (statements+=UIFuncStatements)* "}";

UINodeTextEntry:
	"textentry" name=UINodeID "{" (statements+=UIPropertyDefinition)* "}";

UINodeBar:
	"bar" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeBaseinventory:
	"baseinventory" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeBaselayout:
	"baselayout" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeBasemap:
	"basemap" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeBattlescape:
	"battlescape" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeCheckbox:
	"checkbox" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeContainer:
	"container" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeControls:
	"controls" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeCvarlistener:
	"cvarlistener" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeData:
	"data" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeEditor:
	"editor" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeEkg:
	"ekg" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeGeoscape:
	"geoscape" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeItem:
	"item" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeKeybinding:
	"keybinding" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeLinechart:
	"linechart" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeMaterial_Editor:
	"material_editor" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeMessagelist:
	"messagelist" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeOption:
	"option" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeOptionlist:
	"optionlist" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeOptiontree:
	"optiontree" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeRadar:
	"radar" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeRadiobutton:
	"radiobutton" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeRows:
	"rows" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeSelectbox:
	"selectbox" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeSequence:
	"sequence" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeSpinner:
	"spinner" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeTab:
	"tab" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeTbar:
	"tbar" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeText2:
	"text2" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeTextlist:
	"textlist" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeTexture:
	"texture" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeTimer:
	"timer" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeTodo:
	"todo" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeVideo:
	"video" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeVscrollbar:
	"vscrollbar" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UINodeZone:
	"zone" name=UINodeID "{" (properties+=UIPropertyDefinition)* "}";

UIFont:
	"font" name=ID "{" => "}";

/* ==================== NODE PROPERTIES ================================ */

/**
 * TODO hide this object from the scope, i check creating UFO_ID
 * from fragment UFO_STRING_ but it everytime generate many warnings
 */
UIPropertyDefinition:
	name=ID value=UIPropertyValue;

UIPropertyValue:
	UIPropertyValueString
	| UIPropertyValueBoolean
	| UIPropertyValueNumber
	| UIPropertyValueFunction;

UIPropertyValueString: value=STRING;
UIPropertyValueBoolean: value=UFO_BOOLEAN;
UIPropertyValueNumber: value=INT;
UIPropertyValueFunction: "{" {UIPropertyValueFunction} (statements+=UIFuncStatements)* "}";

/* ==================== GENERAL UI STUFF ================================ */
UIFuncStatements:
	UICvarAssignment | UINodePropertyAssignment | UIFuncIfStatement | UIFuncDeleteCvar | UICommand | UIFuncCall;

UIFuncCall:
	"call" UINodePath;

UICommand:
	"cmd" name=UFO_STRING;

UIFuncDeleteCvar:
	"delete" name=UICvar;

UICvarAssignment:
	name=UICvar "=" value=UIValue;

UINodePropertyAssignment:
	UINodePath "@" property=UINodeProperty "=" value=UIValue;

UIFuncIfStatement:
	"if" "(" conditions+=UIConditionalExpressions+ ")" "{" statements+=UIFuncStatements* "}" ("elif" "("
	conditionsElif+=UIConditionalExpressions+ ")" "{" statements+=UIFuncStatements* "}")* ("else" "{"
	statements+=UIFuncStatements* "}")?;

UIConditionalExpressions:
	conditionalorexpression=UIConditionalOrExpression;

UIConditionalOrExpression:
	conditionalandexpression+=UIConditionalAndExpression ('||' conditionalandexpression+=UIConditionalAndExpression)*;

UIConditionalAndExpression:
	equalityexpression+=UIEqualityExpression ('&&' equalityexpression+=UIEqualityExpression)*;

UIEqualityExpression:
	expression+=UIConditionalExpression (('==' | '!=') expression+=UIConditionalExpression)*;

UIConditionalExpression:
	{UIConditionalExpression} (name=UIValue comparator=UIComparator value=UIValue);

UIValue:
	UFO_STRING | INT | UIFuncParameter | UICvar | UFO_BOOLEAN;

UIImage:
	UFO_STRING | UIFuncParameter | UICvar;

UIFuncParameter:
	"<" INT ">";

UIComparator:
	">" | "<" | "eq" | "ne" | "!=" | "==" | "<=" | ">=";

UINodePath:
	"*node:" ((("this" ("." "parent")?) | "root") ".")? name=UINodeID (=> '.' UINodeID)*;

UICvar:
	"*cvar:" ID;

UINodeID:
	'background' | UINodeType | ID;

	// TODO: add the property keywords
UINodeProperty:
	'invis' | ID;

/* ==================== non-ui stuff============================== */
Tech:
	"tech" name=ID "{"
	"provides" provides=[Item]
	"}";

Sprite:
	"sprite" name=ID "{"
	"image" image=UFO_STRING
	"texl" texl=UFO_STRING
	"size" size=UFO_STRING
	"pack64" pack64=UFO_BOOLEAN
	"}";

Team:
	"team" name=ID "{" => "}";

Terrain:
	"terrain" name=ID "{" => "}";

Chrtemplate:
	"chrtemplate" name=ID "{"
	"rate" rate=UFO_STRING
	"strength" strength=UFO_STRING
	"speed" speed=UFO_STRING
	"accuracy" accuracy=UFO_STRING
	"mind" mind=UFO_STRING
	"close" close=UFO_STRING
	"heavy" heavy=UFO_STRING
	"assault" assault=UFO_STRING
	"sniper" sniper=UFO_STRING
	"explosive" explosive=UFO_STRING
	"health" health=UFO_STRING
	"}";

Particle:
	"particle" name=ID "{"
	(stages+=ParticleStages*)
	"}";

ParticleStages:
	ParticleInitStage | ParticleRunStage | ParticleThinkStage | ParticlePhysicsStage;

ParticlePhysicsStage:
	"physics" "{" => "}";

ParticleThinkStage:
	"think" "{" => "}";

ParticleRunStage:
	"run" "{" => "}";

ParticleInitStage:
	"init" "{" => "}";

MapDef:
	"mapdef" name=ID "{" => "}";

Tips:
	"tips" name=ID "{" => "}";

Sequence:
	"sequence" name=ID "{" => "}";

Item:
	"item" name=ID "{" => "}";

Equipment:
	"equipment" name=ID "{"
	"name" equipName=UFO_I18N_STRING
	(items+=[Item] UFO_STRING)+
	"}";

Building:
	"building" name=ID "{"
	"name" buildingName=UFO_I18N_STRING
	"size" size=UFO_STRING
	"image" image=UFO_STRING
	"type" type=BuildingType
	"depends" depends=[Building]
	"pedia" pedia=[Tech]
	"fixcosts" fixcosts=UFO_STRING
	"build_time" buildTime=UFO_STRING
	"varcosts" varCosts=UFO_STRING
	"map_name" mapName=UFO_STRING
	"capacity" capacity=UFO_STRING
	"ondisable" onDisable=UFO_STRING
	"onenable" onEnable=UFO_STRING
	"ondestroy" onDestroy=UFO_STRING
	"onconstruct" onConstruct=UFO_STRING
	"mandatory" mandatory=UFO_BOOLEAN
	"max_count" maxCount=UFO_STRING
	"starting_employees" startingEmployees=UFO_STRING
	"level" level=UFO_STRING
	"}";

BuildingType:
	"lab" | "hospital" | "aliencont" | "storage" | "hangar" | "smallhangar" | "quarters" | "workshop" |
	"power" | "command" | "amstorage" | "entrance" | "missile" | "laser" | "radar";

Aircraft:
	"aircraft" name=ID "{"
	params=AircraftParam
	(slots+=AircraftSlot)*
	"building" building=[Building]
	"name" aircraftName=UFO_I18N_STRING
	"defaultname" defaultName=UFO_I18N_STRING
	"type" type=AircraftType
	"model" model=UFO_STRING
	"price" price=UFO_STRING
	"numteam" numTeam=UFO_STRING
	"size" size=UFO_STRING
	"image" image=UFO_STRING
	"}";

AircraftType:
	"ufo" | "interceptor" | "transporter";

AircraftSlot:
	"slot" "{"
	"type" type=UFO_STRING
	"position" position=UFO_STRING
	"size" size=UFO_STRING
	"}";

AircraftParam:
	"param" "{"
	"speed" speed=UFO_STRING
	"maxspeed" maxspeed=UFO_STRING
	"shield" shield=UFO_STRING
	"ecm" ecm=UFO_STRING
	"damage" damage=UFO_STRING
	"accuracy" accuracy=UFO_STRING
	"range" range=UFO_STRING
	"antimatter" antimatter=UFO_STRING
	"}";

/* ==================== terminals ================================ */
terminal QUOTES:
	"\"" | "'";

terminal UFO_BOOLEAN:
	'true' | 'false';

terminal fragment UFO_STRING_:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal UFO_I18N_STRING:
	'"_' UFO_STRING_ '"' | "'_" UFO_STRING_ "'";

terminal UFO_STRING:
	'"' UFO_STRING_ '"' | "'" UFO_STRING_ "'";
