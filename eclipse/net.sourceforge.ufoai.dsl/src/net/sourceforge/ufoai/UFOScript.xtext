grammar net.sourceforge.ufoai.UFOScript with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate ufoScript "http://ufoai.org/UFOScript"

// starting point for parsing a ufo script file
UFOScript:
	(blocks+=UITopLevelNode)*;

/* ==================== UI TOP LEVEL NODES ================================ */
UITopLevelNode:
	UINodeComponent | UINodeWindow;

/** a window can only extend another window */
UINodeWindow:
	"window" name=ID ("extends" superWindow=[UINodeWindow])? "{" ("{" properties+=UINodeProperties* "}")?
	((nodes+=UINode) | (panels+=UINodePanel))* "}";

/** components can extend any ui node */
UINodeComponent:
	"component" name=ID "extends" (superComponent=[UINodeComponent] | superType=UINodeType) "{" ("{"
	properties+=UINodeProperties* "}")? (nodes+=UINode)* "}";

/* ==================== NODES ================================ */
UINodeType:
	"panel" | "image" | "button" | "model" | "text" | "string" | "confunc" | "func" | "textentry";

/* panels are a little bit special */
UINodePanel:
	"panel" name=ID "{" ("{" properties+=UIPanelProperties* "}")? (panelNodes+=UINode)* "}";

UINode:
	UINodeImage | UINodeButton | UINodeModel | UINodeText | UINodeString | UINodeConfunc | UINodeFunc | UINodeTextEntry;

UINodeImage:
	"image" name=ID "{" (properties+=UIImageProperties)* "}";

UINodeButton:
	"button" name=ID "{" (properties+=UIButtonProperties)* "}";

UINodeModel:
	"model" name=ID "{" (properties+=UIModelProperties)* "}";

UINodeText:
	"text" name=ID "{" (properties+=UITextProperties)* "}";

UINodeString:
	"string" name=ID "{" (properties+=UIStringProperties)* "}";

UINodeConfunc:
	"confunc" name=ID "{" (statements+=UIFuncStatements)* "}";

UINodeFunc:
	"func" name=ID "{" (statements+=UIFuncStatements)* "}";

UINodeTextEntry:
	"textentry" name=ID "{" (statements+=UITextEntryProperties)* "}";

/* ==================== NODE PROPERTIES ================================ */
UITextEntryProperties:
	UINodeProperties | ("isPassword" isPassword=UIValue) | ("clickOutAbort" clickOutAbort=UIValue) | ("onAbort"
	onAbort=UIValue);

UIStringProperties:
	UINodeProperties | ("longlines" longlines=UIValue);

UITextProperties:
	UINodeProperties | UINodeScrollabelProperties | ("lineselected" lineselected=UIValue) | ("textselected"
	textselected=UIValue) | ("dataid" dataid=UIValue) | ("lineheight" lineheight=UIValue) | ("tabwidth" tabwidth=UIValue)
	| ("longlines" longlines2=UIValue) | ("rows" rows=UIValue) | ("lines" lines=UIValue) | ("mousefx" mousefx=STRING);

UIModelProperties:
	UINodeProperties | ("anim" anim=UIValue) | ("angles" angles=UIValue) | ("origin" origin=UIValue) | ("omega"
	omega=UIValue) | ("scale" scale=UIValue) | ("tag" tag=UIValue) | ("autoscale" autoscale=UIValue) | ("rotatewithmouse"
	rotatewithmouse=UIValue) | ("clipoverflow" clipoverflow=UIValue) | ("skin" skin=UIValue);

UIButtonProperties:
	UINodeProperties | ("icon" icon=UIValue) | ("flipicon" flipicon=UIValue) | ("background" background2=UIValue);

UIImageProperties:
	UINodeProperties | ("preventratio" preventratio=UIValue) | ("mousefx" mousefx2=UIValue) | ("texh" texh=UIValue) |
	("texl" texl=UIValue)
	("src" src=UIValue);

UIPanelProperties:
	UINodeProperties | UINodeScrollabelProperties | ("layout" layout=UIValue) | ("layoutMargin" layoutMargin=UIValue) |
	("layoutColumns" layoutColumns=UIValue) | ("wheelscrollable" wheelscrollable=UIValue) | ("background"
	background=UIValue);

UINodeScrollabelProperties:
	("viewpos" viewpos=UIValue) | ("viewsize" viewsize=UIValue) | ("fullsize" fullsize=UIValue) | ("onViewChange"
	onViewChange=UIFuncStatements);

/* abstract node properties */
UINodeProperties:
	UINodeCallbacks | ("pos" pos=UIValue) | ("size" size=UIValue) | ("width" width=UIValue) | ("height" height=UIValue) |
	("left" left=UIValue) | ("top" top=UIValue) | ("indexed" indexed=UIValue) | ("invis" invis=UIValue) | ("disabled"
	disabled=UIValue) | ("ghost" ghost=UIValue) | ("border" border=UIValue) | ("padding" padding=UIValue) | ("bgcolor"
	bgcolor=UIValue) | ("bordercolor" bordercolor=UIValue) | ("align" align=UIValue) | ("num" num=UIValue) | ("tooltip"
	tooltip=UIValue) | ("image" image=UIValue) | ("string" string=UIValue) | ("font" font=UIValue) | ("color"
	color=UIValue) | ("selectcolor" selectcolor=UIValue) | ("contentalign" contentalign=UIValue) | ("visiblewhen"
	visiblewhen=UIValue) | ("excluderect" excluderect=UIValue);

/* abstract node callbacks */
UINodeCallbacks:
	("onClick" UIFuncStatements) | ("onRClick" UIFuncStatements) | ("onMClick" UIFuncStatements) | ("onWheel"
	UIFuncStatements) | ("onWheelUp" UIFuncStatements) | ("onWheelDown" UIFuncStatements) | ("onMouseEnter"
	UIFuncStatements) | ("onMouseLeave" UIFuncStatements) | ("onChange" UIFuncStatements);

/* ==================== GENERAL UI STUFF ================================ */
UIFuncStatements:
	UICvarAssignment | UINodePropertyAssignment | UIFuncIfStatement | UIFuncDeleteCvar | UICommand;

UICommand:
	"cmd" name=UFO_STRING;

UIFuncDeleteCvar:
	"delete" name=UICvar;

UICvarAssignment:
	name=UICvar "=" value=UIValue;

UINodePropertyAssignment:
	UINodePath "@" property=UINodeProperty "=" value=UIValue;

UIFuncIfStatement:
	"if" "(" conditions=UIConditionalExpressions ")" "{" statements+=UIFuncStatements "}" ("elif" "{"
	statements+=UIFuncStatements "}")* ("else" "{" statements+=UIFuncStatements "}")?;

UIConditionalExpressions:
	conditionalorexpression=UIConditionalOrExpression;

UIConditionalOrExpression:
	conditionalandexpression+=UIConditionalAndExpression ('||' conditionalandexpression+=UIConditionalAndExpression)*;

UIConditionalAndExpression:
	equalityexpression+=UIEqualityExpression ('&&' equalityexpression+=UIEqualityExpression)*;

UIEqualityExpression:
	expression+=UIConditionalExpression (('==' | '!=') expression+=UIConditionalExpression)*;

UIConditionalExpression:
	{UIConditionalExpression} (name=UIValue comparator=UIComparator value=UIValue);

UIValue:
	UFO_STRING | INT | UIFuncParameter | UICvar;

UIFuncParameter:
	"<" INT ">";

UIComparator:
	">" | "<" | "eq" | "ne" | "!=" | "==" | "<=" | ">=";

UINodePath:
	"*node:" ((("this" ("." "parent")?) | "root") ".")? name=[UINode] (=> '.' ID)*;

UICvar:
	"*cvar:" ID;

UINodeProperty:
	name=ID;

terminal fragment UFO_STRING_:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal UFO_STRING:
	'"' UFO_STRING_ '"' | "'" UFO_STRING_ "'" | UFO_STRING_;
