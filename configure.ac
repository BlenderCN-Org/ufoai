AC_INIT(src/server/sv_main.c)

# check build/host/target systems
# (build  = system we're building on,
#  host   = system we're building for,
#  target = system the program we're building will build for)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AC_MSG_CHECKING(system)
case "$host_os" in
	linux*)
		AC_MSG_RESULT(UNIX (GNU/Linux))
		;;
	mingw32* )
		AC_MSG_RESULT(Win32 (mingw32))
		;;
	cygwin* )
		AC_MSG_RESULT(Win32 (cygwin))
		;;
	openbsd* )
		AC_MSG_RESULT(UNIX (OpenBSD))
		;;
	solaris* )
		AC_MSG_RESULT(UNIX (Solaris))
		;;
	darwin*)
		AC_MSG_RESULT(Mac OS X)
		;;
	*)
		AC_MSG_RESULT(not sure... guessing a unix variant)
		;;
esac

AC_ARG_WITH(sdl_config,
	[AC_HELP_STRING([--with-sdl-config=FILE], [using the given sdl-config @<:@default=sdl-config@:>@])],
	[], [with_sdl_config=sdl-config])

AC_ARG_WITH(shaders,
	[AS_HELP_STRING([--with-shaders], [with OpenGL shader support @<:@default=check@:>@])],
	[], [with_shaders=check])

AC_ARG_WITH(snd_sdl,
	[AS_HELP_STRING([--with-snd-sdl], [with SDL sound support @<:@default=check@:>@])],
	[], [with_snd_sdl=check])

AC_ARG_WITH(snd_alsa,
	[AS_HELP_STRING([--with-snd-alsa], [with ALSA sound support @<:@default=check@:>@])],
	[], [with_snd_alsa=check])

AC_ARG_WITH(snd_jack,
	[AS_HELP_STRING([--with-snd-jack], [with JACK sound support @<:@default=check@:>@])],
	[], [with_snd_jack=check])

AC_ARG_WITH(snd_oss,
	[AS_HELP_STRING([--with-snd-oss], [with OSS sound support @<:@default=check@:>@])],
	[], [with_snd_oss=check])

AC_ARG_WITH(snd_arts,
	[AS_HELP_STRING([--with-snd-arts], [with arts sound support @<:@default=check@:>@])],
	[], [with_snd_arts=check])

AC_ARG_WITH(snd_wapi,
	[AS_HELP_STRING([--with-snd-wapi], [with wapi sound support @<:@default=check@:>@])],
	[], [with_snd_wapi=check])

AC_ARG_WITH(curl,
	[AS_HELP_STRING([--with-curl], [compile with curl download support @<:@default=check@:>@])],
	[], [with_curl=check])

AC_ARG_WITH(ipv6,
	[AS_HELP_STRING([--with-ipv6], [compile with ipv6 support @<:@default=no@:>@])],
	[], [with_ipv6=no])

AC_ARG_WITH(curses,
	[AS_HELP_STRING([--with-curses], [compile with curses console support @<:@default=check@:>@])],
	[], [with_curses=check])

AC_ARG_WITH(openal,
	[AS_HELP_STRING([--with-openal], [build openal sound support @<:@default=no@:>@])],
	[], [with_openal=no])

AC_ARG_WITH(openal_config,
	[AC_HELP_STRING([--with-openal-config=FILE], [using the given openal-config @<:@default=openal-config@:>@])],
	[], [with_openal_config=openal-config])

AC_ARG_WITH(opengl_framework,
	[AS_HELP_STRING([--with-opengl-framework], [compile with given opengl framework @<:@default=/System/Library/Frameworks/OpenGL.framework@:>@])],
	[], [with_opengl_framework=/System/Library/Frameworks/OpenGL.framework])

AC_ARG_WITH(sdl_framework,
	[AS_HELP_STRING([--with-sdl-framework], [compile with given sdl framework @<:@default=/Library/Frameworks/SDL.framework@:>@])],
	[], [with_sdl_framework=/Library/Frameworks/SDL.framework])

AC_ARG_WITH(sdl_ttf_framework,
	[AS_HELP_STRING([--with-sdl-ttf-framework], [compile with given sdl-ttf framework @<:@default=/Library/Frameworks/SDL_ttf.framework@:>@])],
	[], [with_sdl_ttf_framework=/Library/Frameworks/SDL_ttf.framework])

AC_ARG_WITH(openal_framework,
	[AS_HELP_STRING([--with-openal-framework], [compile with given openal framework @<:@default=/System/Library/Frameworks/OpenAL.framework@:>@])],
	[], [with_openal_framework=/System/Library/Frameworks/OpenAL.framework])

AC_ARG_ENABLE(dedicated,
	[AS_HELP_STRING([--disable-dedicated], [build dedicated server @<:@default=enabled@:>@])],
	[], [enable_dedicated=yes])

# FIXME: Don't check for client libs if client is disabled
AC_ARG_ENABLE(client,
	[AS_HELP_STRING([--disable-client], [build client @<:@default=enabled@:>@])],
	[], [enable_client=yes])

AC_ARG_ENABLE(master,
	[AS_HELP_STRING([--enable-master], [build masterserver @<:@default=enabled@:>@])],
	[], [enable_master=yes])

AC_ARG_ENABLE(ufo2map,
	[AS_HELP_STRING([--disable-ufo2map], [build ufo2map @<:@default=enabled@:>@])],
	[], [enable_ufo2map=yes])

AC_ARG_ENABLE(release,
	[AS_HELP_STRING([--enable-release], [build release, if disabled then build debug @<:@default=disabled@:>@])],
	[], [enable_release=no])

AC_ARG_ENABLE(paranoid,
	[AS_HELP_STRING([--enable-paranoid], [enable PARANOID checks @<:@default=disabled@:>@])],
	[], [enable_paranoid=no])

AC_ARG_ENABLE(profiling,
	[AS_HELP_STRING([--enable-profiling], [build with profiling for gprof @<:@default=disabled@:>@])],
	[], [enable_profiling=no])

AC_ARG_ENABLE(mmx,
	[AS_HELP_STRING([--enable-mmx], [use MMX optimisations @<:@default=disabled@:>@])],
	[], [enable_mmx=no])

#---------------------------------------------------------------------------------------------
# CHECK SED
#---------------------------------------------------------------------------------------------

AC_CHECK_PROG(HAVE_SED,sed,yes)
if test $HAVE_SED != "yes"
then
	AC_MSG_ERROR([You must have sed installed])
fi

#---------------------------------------------------------------------------------------------
# CHECK ECHO
#---------------------------------------------------------------------------------------------

AC_CHECK_PROG(HAVE_ECHO,echo,yes)
if test $HAVE_ECHO != "yes"
then
	AC_MSG_ERROR([You must have a functioning echo installed])
fi

#---------------------------------------------------------------------------------------------
# CHECK TARGET_OS
#---------------------------------------------------------------------------------------------

AC_MSG_CHECKING([target OS])
if test `echo $target_os | sed "s/\(linux\).*/\1/"` = "linux"
then
	AC_SUBST([TARGET_OS],[linux-gnu])
elif test `echo $target_os | sed "s/\(freebsd\).*/\1/"` = "freebsd"
then
	AC_SUBST([TARGET_OS],[freebsd])
elif test `echo $target_os | sed "s/\(netbsd\).*/\1/"` = "netbsd"
then
	AC_SUBST([TARGET_OS],[netbsd])
elif test `echo $target_os | sed "s/\(mingw32\).*/\1/"` = "mingw32"
then
	AC_SUBST([TARGET_OS],[mingw32])
elif test `echo $target_os | sed "s/\(solaris\).*/\1/"` = "solaris"
then
	AC_SUBST([TARGET_OS],[solaris])
elif test `echo $target_os | sed "s/\(darwin\).*/\1/"` = "darwin"
then
	AC_SUBST([TARGET_OS],[darwin])
	CFLAGS="$CFLAGS -F$with_opengl_framework -F$with_openal_framework -F$with_sdl_framework -F$with_sdl_ttf_framework"
	LDFLAGS="$LDFLAGS -framework IOKit -framework Foundation -framework SDL -framework SDL_ttf -framework OpenGL -framework OpenAL"
else
	AC_MSG_ERROR([The target operating system '$target_os' is unknown, please contact the developers])
fi
AC_MSG_RESULT($TARGET_OS)

#---------------------------------------------------------------------------------------------
# CHECK TARGET_CPU
#---------------------------------------------------------------------------------------------

AC_MSG_CHECKING([target CPU])
if test "$target_cpu" = "x86_64"
then
	AC_SUBST([TARGET_CPU],[x86_64])
elif test "$target_cpu" = "i386" ||
	 test "$target_cpu" = "i486" ||
	 test "$target_cpu" = "i586" ||
	 test "$target_cpu" = "i686"
then
	AC_SUBST([TARGET_CPU],[i386])
elif test "$target_cpu" = "powerpc"
then
	AC_SUBST([TARGET_CPU],[powerpc])
elif test "$target_cpu" = "powerpc64"
then
	AC_SUBST([TARGET_CPU],[powerpc64])
else
	AC_MSG_WARN([The target CPU '$target_cpu' is unknown, default options will be applied])
	AC_MSG_WARN([Please contact the developers for assistance])
	AC_SUBST([TARGET_CPU],[unknown])
fi
AC_MSG_RESULT($TARGET_CPU)

#---------------------------------------------------------------------------------------------
# CHECK CC
#---------------------------------------------------------------------------------------------

AC_PROG_CC

# ---------------------------------------------------------------------
# CHECK SIZES OF INTEGER TYPES
# ---------------------------------------------------------------------
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(int*)

#---------------------------------------------------------------------------------------------
# CHECK RM
#---------------------------------------------------------------------------------------------

AC_CHECK_PROG(HAVE_RM,rm,yes)
if test $HAVE_RM != "yes"
then
	AC_MSG_ERROR([You must have the rm program installed])
fi

#---------------------------------------------------------------------------------------------
# CHECK MKDIR
#---------------------------------------------------------------------------------------------

AC_CHECK_PROG(HAVE_MKDIR,mkdir,yes)
if test $HAVE_MKDIR != "yes"
then
	AC_MSG_ERROR([You must have the mkdir program installed])
fi

#---------------------------------------------------------------------------------------------
# CHECK windres
#---------------------------------------------------------------------------------------------

WINDRES=""
if test $TARGET_OS = "mingw32"
then
	WINDRES=windres
	AC_CHECK_PROG(HAVE_WINDRES,$WINDRES,yes)
	if test "$HAVE_WINDRES" != "yes"
	then
		WINDRES="$target_cpu-$target_os-windres"
		AC_CHECK_PROG(HAVE_WINDRES,$WINDRES,yes)
		if test "$HAVE_WINDRES" != "yes"
		then
			WINDRES=""
			AC_MSG_ERROR([You must have the windres program installed])
		fi
	fi
fi
AC_SUBST([WINDRES],$WINDRES)

#---------------------------------------------------------------------------------------------
# CHECK winsock2
#---------------------------------------------------------------------------------------------

if test $TARGET_OS = "mingw32"
then
	AC_MSG_RESULT([Mingw32 - Trying to use Winsock2 (WS2_32)])
	AC_CHECK_HEADERS([winsock2.h])
	AC_CHECK_LIB(ws2_32, main, , AC_MSG_ERROR([Winsock2 is needed for a Win32 mingw build.]))
fi

#---------------------------------------------------------------------------------------------
# CHECK NETWORKING
#---------------------------------------------------------------------------------------------

#---------------------------------------------------------------------------------------------
# CHECK IPV6 FUNCTION
#---------------------------------------------------------------------------------------------

AC_CHECK_FUNCS(getaddrinfo)
AC_CHECK_FUNCS(freeaddrinfo)

#---------------------------------------------------------------------------------------------
# CHECK AI_NUMERICSERV
#---------------------------------------------------------------------------------------------

AC_CHECK_DECL(AI_NUMERICSERV,
	[AC_DEFINE(HAVE_AI_NUMERICSERV,1,[AI_NUMERICSERV found in netdb.h])],
	[AC_DEFINE(HAVE_AI_NUMERICSERV,0,[AI_NUMERICSERV not found in netdb.h])],
	[#include <netdb.h>])

#---------------------------------------------------------------------------------------------
# Check for stdint.h
#---------------------------------------------------------------------------------------------

AC_CHECK_HEADERS([stdint.h])
if test "$ac_cv_header_stdint_h" != "yes"
then
	AC_MSG_ERROR([Couldn't find stdint.h!])
fi

#---------------------------------------------------------------------------------------------
# Check how to open a dynamic library ...
#---------------------------------------------------------------------------------------------

LIBS=
if test "$TARGET_OS" != "mingw32"
then
	AC_SEARCH_LIBS([dlopen],[dl])
	if test "$ac_cv_search_dlopen" = "no"
	then
		AC_MSG_ERROR([could not decide how to open a dynamic link library!])
	fi
fi
CLIENT_LIBS="$CLIENT_LIBS $LIBS"
SERVER_LIBS="$SERVER_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check how to do maths
#---------------------------------------------------------------------------------------------

LIBS=
AC_SEARCH_LIBS([cos],[m])
if test "$ac_cv_search_cos" = "no"
then
	AC_MSG_ERROR([could not determine how to link to maths library])
fi
CLIENT_LIBS="$CLIENT_LIBS $LIBS"
SERVER_LIBS="$SERVER_LIBS $LIBS"
GAME_LIBS="$GAME_LIBS $LIBS"
TOOLS_LIBS="$TOOLS_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check how to do stricmp
#---------------------------------------------------------------------------------------------

LIBS=
AC_SEARCH_LIBS([stricmp],[])
if test "$ac_cv_search_stricmp" = "no"
then
	AC_SEARCH_LIBS([strcasecmp], [])
	if test "$ac_cv_search_strcasecmp" = "no"
	then
		AC_MSG_ERROR([could find neither stricmp nor strcasecmp!])
	else
		AC_DEFINE([stricmp],[strcasecmp],[stricmp function to use])
	fi
fi
CLIENT_LIBS="$CLIENT_LIBS $LIBS"
SERVER_LIBS="$SERVER_LIBS $LIBS"
GAME_LIBS="$GAME_LIBS $LIBS"
TOOLS_LIBS="$TOOLS_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for zlib
#---------------------------------------------------------------------------------------------

LIBS=
AC_CHECK_HEADERS([zlib.h])
if test "$ac_cv_header_zlib_h" != "yes"
then
	AC_MSG_ERROR([Couldn't find zlib.h!])
fi
AC_SEARCH_LIBS([compress],[z])
if test "$ac_cv_search_compress" = "no"
then
	AC_MSG_ERROR([couldn't find zlib!])
fi
CLIENT_LIBS="$CLIENT_LIBS $LIBS"
SERVER_LIBS="$SERVER_LIBS $LIBS"
TOOLS_LIBS="$TOOLS_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for openal-config
#---------------------------------------------------------------------------------------------

openal_config=$with_openal_config
AC_CHECK_PROG(HAVE_OPENAL_CONFIG,$openal_config,yes)
if test "$ac_cv_prog_HAVE_OPENAL_CONFIG" = "yes"
then
	AC_SUBST([OPENAL_CFLAGS],`$openal_config --cflags`)
	AC_SUBST([OPENAL_LIBS],`$openal_config --libs`)
else
	AC_MSG_WARN([cannot find $openal_config might fail to find OpenAL!])
fi

#---------------------------------------------------------------------------------------------
# Check for OpenAL headers and libraries
#---------------------------------------------------------------------------------------------

LIBS=
if test "$with_openal" = "check" || test "$with_openal" = "yes"
then
	AC_CHECK_HEADERS([AL/al.h AL/alc.h])
	if test "$ac_cv_header_AL_al_h" != "yes" || \
		test "$ac_cv_header_AL_alc_h" != "yes"
	then
		AC_CHECK_HEADERS([OpenAL/al.h OpenAL/alc.h])
		if test "$ac_cv_header_OpenAL_al_h" != "yes" || \
			test "$ac_cv_header_OpenAL_alc_h" != "yes"
		then
			if test "$with_openal" = "yes"
			then
				AC_MSG_ERROR([--with-openal specified but cannot find OpenAL header!])
			fi
		else
			AC_SUBST([HAVE_OPENAL],1)
		fi
	elif test "$with_openal" = "yes"
	then
		AC_SUBST([HAVE_OPENAL], 1)
		AC_SEARCH_LIBS([alSourcePlay],[openal openal32])
		if test "$ac_cv_search_alSourcePlay" = "no"
		then
			AC_MSG_WARN([couldn't find OpenAL library!])
			AC_SUBST([HAVE_OPENAL], 0)
		fi
	fi
else
	AC_MSG_NOTICE([Without OpenAL])
fi
#CLIENT_LIBS="$CLIENT_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for libogg
#---------------------------------------------------------------------------------------------

LIBS=
AC_CHECK_LIB(ogg, ogg_stream_init, LIBS="-logg", AC_MSG_ERROR([You must have libogg!!!]))
CLIENT_LIBS="$CLIENT_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for libvorbis
#---------------------------------------------------------------------------------------------

LIBS=
AC_CHECK_LIB(vorbis, vorbis_info_init, LIBS="-lvorbis", AC_MSG_ERROR([You must have libvorbis!!!]))
CLIENT_LIBS="$CLIENT_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for libvorbis file
#---------------------------------------------------------------------------------------------

LIBS=
AC_CHECK_LIB(vorbisfile, ov_open, LIBS="-lvorbisfile", AC_MSG_ERROR([You must have libvorbisfile!!!]))
CLIENT_LIBS="$CLIENT_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for gettext
#---------------------------------------------------------------------------------------------

LIBS=
AC_SEARCH_LIBS([gettext],[intl])
if test "$ac_cv_search_gettext" = "no"
then
	AC_MSG_ERROR([couldn't find internationalization library with gettext in it])
fi
#AC_CHECK_LIB(intl, gettext, LIBS="-lintl", AC_MSG_ERROR([You must have libintl!!!]))
CLIENT_LIBS="$CLIENT_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check SDL
#---------------------------------------------------------------------------------------------

sdl_config=$with_sdl_config

AC_CHECK_PROG(HAVE_SDL_CONFIG,$sdl_config,yes)
if test "$ac_cv_prog_HAVE_SDL_CONFIG" = "yes"
then
	AC_SUBST([SDL_CFLAGS],`$sdl_config --cflags`)
	AC_SUBST([SDL_LIBS],`$sdl_config --libs`)
else
	AC_MSG_WARN([cannot find $sdl_config might fail to find SDL!])
fi

if test "$with_snd_sdl" = "check" || test "$with_snd_sdl" = "yes"
then
	AC_SUBST([HAVE_SND_SDL],1)
else
	AC_MSG_NOTICE([Without SDL sound])
	AC_SUBST([HAVE_SND_SDL],0)
fi

#---------------------------------------------------------------------------------------------
# Check for SDL headers and libraries
#---------------------------------------------------------------------------------------------

OLD_CFLAGS=$CFLAGS
CFLAGS="$CFLAGS $SDL_CFLAGS"

AC_CHECK_HEADERS([SDL.h])
if test "$ac_cv_header_SDL_h" != "yes"
then
	AC_CHECK_HEADERS([SDL/SDL.h])
	if test "$ac_cv_header_SDL_SDL_h" != "yes"
	then
		if test "$enable_client" = "yes"
		then
			AC_MSG_ERROR([You must have the SDL development headers])
		fi
	else
		SDL_HEADER="SDL/SDL.h"
		AC_DEFINE([USE_SDL_FRAMEWORK],[1],[Use SDL framework])
	fi
else
	SDL_HEADER="SDL.h"
fi

CFLAGS=$OLD_CFLAGS

OLD_LDFLAGS=$LDFLAGS
LDFLAGS="$LDFLAGS $SDL_LDFLAGS"
AC_SEARCH_LIBS([SDL_Init],[SDL])
if test "$ac_cv_search_SDL_Init" = "no"
then
	if test "$enable_client" = "yes"
	then
		AC_MSG_ERROR([You must have the SDL development libraries])
	fi
fi
LDFLAGS=$OLD_LDFLAGS

#---------------------------------------------------------------------------------------------
# Check for SDL_ttf
#---------------------------------------------------------------------------------------------

OLD_CFLAGS=$CFLAGS
CFLAGS="$CFLAGS $SDL_CFLAGS"

AC_CHECK_HEADERS([SDL_ttf.h],[],[],[
		#include <$SDL_HEADER>
	])
if test "$ac_cv_header_SDL_ttf_h" != "yes"
then
	AC_CHECK_HEADERS([SDL_ttf/SDL_ttf.h],[],[],[
			#include <$SDL_HEADER>
		])
	if test "$ac_cv_header_SDL_ttf_SDL_ttf_h" != "yes"
	then
		if test "$enable_client" = "yes"
		then
			AC_MSG_ERROR([You must have the SDL_ttf development headers])
		fi
	else
		AC_DEFINE([USE_SDL_TTF_FRAMEWORK],[1],[Use SDL TTF framework])
	fi
fi
CFLAGS=$OLD_CFLAGS

LIBS=
AC_SEARCH_LIBS([TTF_Init],[SDL_ttf])
if test "$ac_cv_search_TTF_Init" = "no"
then
	if test "$enable_client" = "yes"
	then
		AC_MSG_ERROR([You must have the SDL_ttf development libraries])
	fi
fi
CLIENT_LIBS="$CLIENT_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check JPEG
#---------------------------------------------------------------------------------------------

LIBS=
AC_CHECK_LIB(jpeg, jpeg_CreateDecompress, LIBS="-ljpeg", AC_MSG_ERROR([You must have libjpeg!!!]))
TOOLS_LIBS="$TOOLS_LIBS $LIBS"
CLIENT_LIBS="$CLIENT_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check PNG
#---------------------------------------------------------------------------------------------

LIBS=
AC_CHECK_LIB(png, png_create_info_struct, LIBS="-lpng", AC_MSG_ERROR([You must have libpng!!!]))
CLIENT_LIBS="$CLIENT_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for opengl headers
#---------------------------------------------------------------------------------------------

AC_CHECK_HEADERS([GL/gl.h GL/glu.h])

if test "$ac_cv_header_GL_gl_h" != "yes" || \
	test "$ac_cv_header_GL_glu_h" != "yes"
then
	AC_CHECK_HEADERS([OpenGL/gl.h OpenGL/glu.h])
	if test "$ac_cv_header_OpenGL_gl_h" != "yes" || \
		test "$ac_cv_header_OpenGL_glu_h" != "yes"
	then
		if test "$enable_client" = "yes"
		then
			AC_MSG_ERROR([Couldn't find OpenGL development headers!])
		fi
	else
		AC_DEFINE([GL_H_WITHOUT_GL_DIR],[1],[OpenGL header path])
	fi
fi

#---------------------------------------------------------------------------------------------
# Check for shaders
#---------------------------------------------------------------------------------------------

if test "$with_shaders" = "check" || test "$with_shaders" = "yes"
then
	shaders_enabled=no
	AC_CHECK_HEADERS([GL/glext.h],[],[],[
		#include <GL/gl.h>
		#include <GL/glu.h>
	])

	if test "$ac_cv_header_GL_glext_h" = "yes"
	then
		AC_MSG_CHECKING([OpenGL shader support])
		AC_COMPILE_IFELSE([
				AC_LANG_PROGRAM([[
					#include <GL/gl.h>
					#include <GL/glu.h>
					#include <GL/glext.h>
					]]
					,[[glEnable(GL_FRAGMENT_PROGRAM_ARB);]]
				)],
				[ac_cv_shaders=yes],
				[ac_cv_shaders=]
			)
		if test "$ac_cv_shaders" = "yes"
		then
			AC_MSG_RESULT([yes])
			AC_SUBST([HAVE_SHADERS],1)
			AC_DEFINE([HAVE_SHADERS],[1],[Enable shader support])
			shaders_enabled=yes
		else
			AC_MSG_RESULT([no])
			if test "$with_shaders" = "yes"
			then
				AC_MSG_ERROR([--with-shaders specified but couldn't use OpenGL shaders!])
			fi
		fi
	fi
else
	AC_MSG_NOTICE([Without shader support])
fi

#---------------------------------------------------------------------------------------------
# Check JACK
#---------------------------------------------------------------------------------------------

LIBS=
if test "$with_snd_jack" = "check" || test "$with_snd_jack" = "yes"
then
	AC_CHECK_HEADERS([jack/jack.h])
	if test "$ac_cv_header_jack_jack_h" = "yes"
	then
		AC_SEARCH_LIBS([jack_client_open], [jack])
		if test "$ac_cv_search_jack_client_open" != "no"
		then
			AC_SUBST([HAVE_SND_JACK],1)
		else
			AC_MSG_ERROR([found jack header but couldn't locate jack library!])
		fi
	elif test "$with_snd_jack" = "yes"
	then
		AC_MSG_ERROR([specified --with-snd-jack specified but cannot find jack/jack.h!])
	fi
else
	AC_MSG_NOTICE([Without JACK sound])
fi
SND_JACK_LIBS="$SND_JACK_LIBS $LIBS"


#---------------------------------------------------------------------------------------------
# Check ALSA
#---------------------------------------------------------------------------------------------

LIBS=
if test "$with_snd_alsa" = "check" || test "$with_snd_alsa" = "yes"
then
	AC_CHECK_HEADERS([alsa/asoundlib.h])
	if test "$ac_cv_header_alsa_asoundlib_h" = "yes"
	then
		AC_SEARCH_LIBS([snd_pcm_open], [asound])
		if test "$ac_cv_search_snd_pcm_open" != "no"
		then
			AC_SUBST([HAVE_SND_ALSA],1)
		else
			AC_MSG_ERROR([found alsa header but couldn't locate alsa library!])
		fi
	elif test "$with_snd_alsa" = "yes"
	then
		AC_MSG_ERROR([specified --with-snd-alsa specified but cannot find alsa/asoundlib.h!])
	fi
else
	AC_MSG_NOTICE([Without ALSA sound])
fi
SND_ALSA_LIBS="$SND_ALSA_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check OSS
#---------------------------------------------------------------------------------------------

LIBS=
if test "$with_snd_alsa" = "check" || test "$with_snd_alsa" = "yes"
then
	AC_CHECK_HEADERS([linux/soundcard.h])
	if test "$ac_cv_header_linux_soundcard_h" != "yes"
	then
		AC_CHECK_HEADERS([sys/soundcard.h])
		if test "$ac_cv_header_sys_soundcard_h" = "yes"
		then
			AC_DEFINE([OSS_HEADER_SYS],[1],[OSS headers in sys])
		fi
	fi
	if test "$ac_cv_header_linux_soundcard_h" = "yes" || \
		test "$ac_cv_header_sys_soundcard_h" = "yes"
	then
		AC_SUBST([HAVE_SND_OSS],1)
	fi
else
	AC_MSG_NOTICE([Without OSS sound])
fi
SND_OSS_LIBS="$SND_OSS_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check ARTS
#---------------------------------------------------------------------------------------------

if (test "$with_snd_arts" = check || test "$with_snd_arts" = yes) && test "$TARGET_OS" != "mingw32"
then
	AC_CHECK_PROG(HAVE_ARTSC_CONFIG,artsc-config,yes)
	if test "$ac_cv_prog_HAVE_ARTSC_CONFIG" = "yes"
	then
		AC_SUBST([HAVE_SND_ARTS],1)
		AC_SUBST([SND_ARTS_CFLAGS], `artsc-config --cflags`)
		AC_SUBST([SND_ARTS_LIBS], `artsc-config --libs`)
	fi
else
	AC_MSG_NOTICE([Without ARTS sound])
fi

#---------------------------------------------------------------------------------------------
# Check WAPI
#---------------------------------------------------------------------------------------------

LIBS=
if test "$with_snd_wapi" = "check" || test "$with_snd_wapi" = "yes"
then
	AC_CHECK_HEADERS([windows.h])
	if test "$ac_cv_header_windows_h" = "yes"
	then
		AC_SUBST([HAVE_SND_WAPI],1)
	elif test "$with_snd_wapi" = "yes"
	then
		AC_MSG_ERROR([specified --with-snd-wapi specified but cannot find windows.h!])
	fi
else
	AC_MSG_NOTICE([Without WAPI sound])
fi
SND_WAPI_LIBS="$SND_WAPI_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for curses
#---------------------------------------------------------------------------------------------

LIBS=
if test "$with_curses" = "check" || test "$with_curses" = "yes"
then
	AC_SEARCH_LIBS([newwin], [curses])
	if test "$ac_cv_search_newwin" != "no"
	then
		AC_SUBST([HAVE_CURSES],1)
		AC_DEFINE([HAVE_CURSES],[1],[Have curses library])
	elif test "$with_curses" = "yes"
	then
		AC_MSG_ERROR([--with-curses specified but couldn't find newwin])
	fi
else
	AC_MSG_NOTICE([Without curses])
fi
SERVER_LIBS="$SERVER_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for curl
#---------------------------------------------------------------------------------------------

LIBS=
if test "$with_curl" = "check" || test "$with_curl" = "yes"
then
	AC_SEARCH_LIBS([curl_easy_init], [curl])
	if test "$ac_cv_search_curl_easy_init" != "no"
	then
		AC_SUBST([HAVE_CURL],1)
		AC_DEFINE([HAVE_CURL],[1],[Have curl library])
	elif test "$with_curl" = "yes"
	then
		AC_MSG_ERROR([--with-curl specified but couldn't find ])
	fi
else
	AC_MSG_NOTICE([Without cURL])
fi
CLIENT_LIBS="$CLIENT_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for ipv6
#---------------------------------------------------------------------------------------------

AC_SUBST([HAVE_IPV6],0)
if test "$with_ipv6" = "yes"
then
	AC_MSG_NOTICE([Enabling ipv6 support])
	AC_SUBST([HAVE_IPV6],1)
	AC_DEFINE([HAVE_IPV6],[1],[Enable ipv6 support])
else
	AC_MSG_NOTICE([Without IPv6])
fi

#---------------------------------------------------------------------------------------------
# Check for client
#---------------------------------------------------------------------------------------------

AC_SUBST([BUILD_CLIENT],0)
if test "$enable_client" = "yes"
then
	AC_MSG_NOTICE([Enabling client])
	AC_SUBST([BUILD_CLIENT],1)
fi

#---------------------------------------------------------------------------------------------
# Check for dedicated
#---------------------------------------------------------------------------------------------

AC_SUBST([BUILD_DEDICATED],0)
if test "$enable_dedicated" = "yes"
then
	AC_MSG_NOTICE([Enabling dedicated server])
	AC_SUBST([BUILD_DEDICATED],1)
fi

#---------------------------------------------------------------------------------------------
# Check for master
#---------------------------------------------------------------------------------------------

AC_SUBST([BUILD_MASTER],0)
if test "$enable_master" = "yes"
then
	AC_MSG_NOTICE([Enabling masterserver])
	AC_SUBST([BUILD_MASTER],1)
fi

#---------------------------------------------------------------------------------------------
# Check for ufo2map
#---------------------------------------------------------------------------------------------

AC_SUBST([BUILD_UFO2MAP],0)
if test "$enable_ufo2map" = "yes"
then
	AC_MSG_NOTICE([Enabling ufo2map])
	AC_SUBST([BUILD_UFO2MAP],1)
fi

#---------------------------------------------------------------------------------------------
# Check for qdata
#---------------------------------------------------------------------------------------------

AC_SUBST([BUILD_QDATA],0)
if test "$enable_qdata" = "yes"
then
	AC_MSG_NOTICE([Enabling qdata])
	AC_SUBST([BUILD_QDATA],1)
fi

#---------------------------------------------------------------------------------------------
# Check for debug
#---------------------------------------------------------------------------------------------

if test "$enable_release" = "no"
then
	AC_MSG_NOTICE([Enabling debug build])
	AC_SUBST([BUILD_DEBUG],1)
else
	AC_MSG_NOTICE([Enabling release build])
	AC_SUBST([BUILD_DEBUG],0)
fi

#---------------------------------------------------------------------------------------------
# Check for PARANOID
#---------------------------------------------------------------------------------------------

if test "$enable_paranoid" = "yes"
then
	AC_SUBST([PARANOID],1)
	AC_MSG_NOTICE([Enabling PARANOID])
fi

#---------------------------------------------------------------------------------------------
# Check for PROFILING
#---------------------------------------------------------------------------------------------

if test "$enable_profiling" = "yes"
then
	AC_SUBST([PROFILING],1)
	AC_MSG_NOTICE([Enabling profiling])
else
	AC_SUBST([PROFILING],0)
fi

# ---------------------------------------------------------------------
# Architecture dependent optimisations
# ---------------------------------------------------------------------

if test "$enable_mmx" = "yes"
then
	AC_SUBST([MMX],1)
	AC_MSG_NOTICE([Enabling MMX])
else
	AC_SUBST([MMX],0)
fi

#---------------------------------------------------------------------------------------------

AC_SUBST([EXE_EXT],"$ac_exe_ext")

AC_SUBST([CLIENT_LIBS],"$CLIENT_LIBS")
AC_SUBST([SERVER_LIBS],"$SERVER_LIBS")
AC_SUBST([GAME_LIBS],"$GAME_LIBS")
AC_SUBST([TOOLS_LIBS],"$TOOLS_LIBS")
AC_SUBST([MASTER_LIBS],"$MASTER_LIBS")
AC_SUBST([SND_ARTS_LIBS],"$SND_ARTS_LIBS")
AC_SUBST([SND_SDL_LIBS],"$SND_SDL_LIBS")
AC_SUBST([SND_JACK_LIBS],"$SND_JACK_LIBS")
AC_SUBST([SND_OSS_LIBS],"$SND_OSS_LIBS")
AC_SUBST([SND_WAPI_LIBS],"$SND_WAPI_LIBS")
AC_SUBST([SND_ALSA_LIBS],"$SND_ALSA_LIBS")

#AC_MSG_NOTICE(Compiler flags: $CFLAGS)
#AC_MSG_NOTICE(Link against:   $LIBS")

AC_CONFIG_HEADERS([config.h:config.h.in])
AC_OUTPUT(Makefile)
