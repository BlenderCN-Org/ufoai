# =================================
# Make Environment
# =================================

#MAKE_FLAGS=--stop --silent

# =================================
# Directories
# =================================

DIR_ROOT?=$(shell pwd)/..

DIR_BUILD=$(DIR_ROOT)/$(BUILD_TYPE)$(ARCH)

SRC_ROOT:=$(DIR_ROOT)/src

src_common=$(SRC_ROOT)/qcommon
src_ports=$(SRC_ROOT)/ports
src_game=$(SRC_ROOT)/game
src_client=$(SRC_ROOT)/client
src_renderer=$(SRC_ROOT)/ref_gl
src_sound=$(SRC_ROOT)/client
src_po=$(SRC_ROOT)/po
src_server=$(SRC_ROOT)/server
src_docs=$(SRC_ROOT)/docs
src_tools=$(SRC_ROOT)/tools

# Directory names for system-specific code. Whenever system-specific directories exist, they should use one of the names here.
# E.g. ports/linux or client/sound/linux
# NOTE: The unix directory is for generic code for UNIX-like systems.
# For different UNIX flavours, create new dir, e.g. netbsd, openbsd, hpux and include unix/Makefile. See ports/Linux for E.G.

dirname_windows=win32
dirname_cygwin=win32
dirname_linux=linux
dirname_bsd=bsd
dirname_darwin=macosx
dirname_irix=irix
dirname_solaris=solaris
dirname_null=null

dirname_unix=unix

build_common=$(DIR_BUILD)/common
build_ports=$(DIR_BUILD)/ports
build_game=$(DIR_BUILD)/game
build_client=$(DIR_BUILD)/client
build_render=$(DIR_BUILD)/renderer
build_sound=$(DIR_BUILD)/sound
build_po=$(DIR_BUILD)/po
build_server=$(DIR_BUILD)/server
build_docs=$(DIR_BUILD)/docs
build_tools=$(DIR_BUILD)/tools

mkdir_dir_list+=$(build_common) $(build_ports) $(build_game) $(build_client) $(build_tools)
mkdir_dir_list+=$(build_render) $(build_sound) $(build_po) $(build_server) $(build_docs)

# =================================
# Targets
# =================================

target_client=$(DIR_BUILD)/ufo$(EXT_BIN)
target_server=$(DIR_BUILD)/ufoded$(EXT_BIN)
target_ufo2map=$()/ufo2map$(EXT_BIN)

target_game=$(DIR_BUILD)/game$(EXT_SHLIB)
target_render_glx=$(DIR_BUILD)/ref_glx$(EXT_SHLIB)
target_render_sdl=$(DIR_BUILD)/ref_sdl$(EXT_SHLIB)
target_sound_oss=$(DIR_BUILD)/snd_oss$(EXT_SHLIB)
target_sound_alsa=$(DIR_BUILD)/snd_alsa$(EXT_SHLIB)
target_sound_sdl=$(DIR_BUILD)/snd_sdl$(EXT_SHLIB)


# =================================
# Build Environment
# =================================

# start of configurable options
# Many of these are obsolete or just-plain-stupid and should be handled by rules, not options.

# Here are your build options:
# (Note: not all options are available for all platforms).
# ufo (uses OSS for sound, cdrom ioctls for cd audio) is automatically built.
# game.so is automatically built.
BUILD_SDLUFO=YES	# use SDL for cdrom, sound and maybe renderer (selectable). Not sure this is optional.
BUILD_GLX=YES		# X11 GLX driver
BUILD_DEDICATED=YES	# build a dedicated ufo server
BUILD_ALSA=YES		# build alsa sound driver
BUILD_OSS=YES		# build oss sound driver
BUILD_ARTS=NO		# build arts sound driver
BUILD_WITH_SHADER=NO	# build with shader support
HAVE_IPV6=NO		# Compile with IPv6 (protocol independent API). Tested on FreeBSD
HAVE_GETTEXT=YES	# Compile with multilanguage-support? Don't think this is optional anymore.
BUILD_WITH_DGA=NO	# dga support compiled in.
BUILD_WITH_VIDMODE=YES	# vidmode support.
BUILD_WITH_MMX=NO	# MMX support. FIXME: This is broken - will also enable SSE and will only work on P3, Athlon XP or later.
BUILD_PARANOID=YES	# paranoid mode for debug.
BUILD_FOR_PROFILING=NO  # build with -pg option for profiling via gprof.
BUILD_COMPILETOOLS=YES	# build ufo2map bsp compile tool.

# Discover OS & ARCH.
# FIXME: These need to be adapted to allow cross-compilation.
# Check OS type.
# TODO: IRIX / IRIX64?
OSTYPE := $(shell uname -s)
ifneq ($(OSTYPE),Linux)
  ifneq ($(OSTYPE),FreeBSD)
    ifneq ($(OSTYPE),Darwin)
      ifeq ($(OSTYPE),SunOS)
        $(error OS $(OSTYPE) detected, use "Makefile.Solaris" instead.)
      else
        $(error OS $(OSTYPE) is currently not supported)
      endif
    endif
  endif
endif


# this nice line comes from the linux kernel makefile
ARCH := $(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc/ -e s/sparc64/sparc/ -e s/arm.*/arm/ -e s/sa110/arm/ -e s/alpha/axp/ -e 's/Power Macintosh/ppc/' )

ifneq ($(ARCH),x86_64)
  ifneq ($(ARCH),i386)
    ifneq ($(ARCH),axp)
      ifneq ($(OSTYPE),ppc)
        ifneq ($(OSTYPE),Darwin)
          ifneq ($(ARCH),sparc)
            $(error arch $(ARCH) is currently not supported)
          endif
        endif
      endif
    endif
  endif
endif

# Discover game version.
VERSION=$(shell grep UFO_VERSION $(src_common)/qcommon.h | sed -e 's/.*UFO_VERSION\s*\(.*\)/\1/')

# Setup basic CFLAGS

CFLAGS=$(CFLAGS_BASE) $(CFLAGS_ARCH) $(CFLAGS_OPTS) $(CFLAGS_BUILD)
# FIXME: BSD_SOURCE AND XOPEN_SOURCE belong in the source files they are needed in, not here.
CFLAGS_BASE=-Wall -pipe -Dstricmp=strcasecmp -D_BSD_SOURCE -D_XOPEN_SOURCE -std=c89 -D_REENTRANT
# Put this in when it is fixed
# -ansi -pedantic
CFLAGS_RELEASE=-ffast-math -funroll-loops -fomit-frame-pointer -fexpensive-optimizations -DNDEBUG $(CFLAGS_ARCH_RELEASE)
CFLAGS_DEBUG=-g -O0 -D_FORTIFY_SOURCE=2 -DDEBUG -fno-inline $(CFLAGS_ARCH_DEBUG)
CFLAGS_TOOLS=
CFLAGS_PROFILER=-pg -DPROFILING -fprofile-arcs -ftest-coverage
CFLAGS_ARCH_RELEASE=
CFLAGS_ARCH_DEBUG=
CFLAGS_OPTS=
CFLAGS_SHLIB=-fPIC

# Setup basic LDFLAGS and LDLIBS

LDLIBS=-lm -lvorbisfile -lvorbis $(LDLIBS_SDL) $(LDLIBS_ARCH) $(LDLIBS_OS)
LDLIBS_SDL=-lSDL -lpthread -lSDL_ttf
LDLIBS_ARCH=

LDFLAGS=$(LDFLAGS_ARCH) $(LDFLAGS_OS)
LDFLAGS_ARCH=
LDFLAGS_SHLIB=-shared
LDFLAGS_NOTSHLIB=

# Choose correct build flags - release or debug.

ifeq ($(strip $(DEBUG)),YES)
  CFLAGS_BUILD=$(CFLAGS_DEBUG)
  BUILD_TYPE=debug
  ifeq ($(strip $(PARANOID)),YES)
    CFLAGS_BUILD+=-DPARANOID
  endif
else
  CFLAGS_BUILD=$(CFLAGS_RELEASE)
  BUILD_TYPE=release
endif

# Configure *FLAGS for options.

ifeq ($(strip $(BUILD_SDLUFO)),YES)
  CFLAGS_OPTS+=-DUSE_SDL
endif

ifeq ($(strip $(BUILD_ALSA)),YES)
  CFLAGS_OPTS+=-DUSE_ALSA
  LDLIBS_OPTS+=-lasound
endif

ifeq ($(strip $(BUILD_WITH_DGA)),YES)
  CFLAGS_OPTS+=-DHAVE_DGA
endif

ifeq ($(strip $(BUILD_WITH_MMX)),YES)
  CFLAGS_OPTS+=-DQ2_MMX_ENABLED -msse
endif

ifeq ($(strip $(BUILD_WITH_VIDMODE)),YES)
  CFLAGS_OPTS+=-DHAVE_VIDMODE
endif

ifeq ($(strip $(HAVE_GETTEXT)),YES)
  CFLAGS_OPTS+=-DHAVE_GETTEXT
endif

ifeq ($(strip $(BUILD_WITH_SHADER)),YES)
  CFLAGS_OPTS+=-DSHADERS
endif

ifeq ($(strip $(HAVE_IPV6)),YES)
  CFLAGS_OPTS+=-DHAVE_IPV6
  ifeq ($(OSTYPE),FreeBSD)
    CFLAGS_OPTS+=-DHAVE_SIN6_LEN
  endif
  NET_UDP=net_udp6
else
  NET_UDP=net_udp
endif

# Commands

CC_CLIENT    =@echo " * [CLIENT] $@"; $(CC) $(CFLAGS) -o $@ -c $<
CC_SERVER    =@echo " * [SERVER] $@"; $(CC) $(CFLAGS) -DDEDICATED_ONLY -o $@ -c $<
CC_COMMON    =@echo " * [COMMON] $@"; $(CC) $(CFLAGS) -o $@ -c $<
CC_TOOLS     =@echo " * [TOOLS]  $@"; $(CC) $(CFLAGS) -o $@ -c $<
CC_JPEG      =@echo " * [JPG]    $@"; $(CC) $(CFLAGS) -o $@ -c $<
# CC_OPTIMISE=@echo " * [OPT]    $@"; $(CC) $(CFLAGS) -O -o $@ -c $<
CC_SHLIB     =@echo " * [SHLIB]  $@"; $(CC) $(CFLAGS) $(CFLAGS_SHLIB) -o $@ -c $<
CC_GL_SHLIB  =@echo " * [RENDER] $@"; $(CC) $(CFLAGS) $(CFLAGS_SHLIB) $(CFLAGS_GLX) -o $@ -c $<
CC_SND_SHLIB =@echo " * [SOUND]  $@"; $(CC) $(CFLAGS) $(CFLAGS_SHLIB) -o $@ -c $<
CC_AS        =@echo " * [AS]     $@"; $(CC) $(CFLAGS) -DELF -x assembler-with-cpp -o $@ -c $<
CC_AS_SHLIB  =@echo " * [AS LIB] $@"; $(CC) $(CFLAGS) $(CFLAGS_SHLIB) -DELF -x assembler-with-cpp -o $@ -c $<


# =================================
# HorribleHack(tm) to choose default target
# =================================
.PHONY: default
default: all

# =================================
# Inclusions
# =================================

include $(src_common)/Makefile
include $(src_ports)/Makefile
include $(src_game)/Makefile
include $(src_server)/Makefile
include $(src_renderer)/Makefile
include $(src_client)/Makefile
include $(src_tools)/Makefile

# =================================
# Build Targets
# =================================

.PHONY: all mkdirs
all: mkdirs $(target_client) $(target_server) $(target_render) $(target_sound) $(target_game) $(target_ufo2map)

mkdirs:
	@mkdir -p $(mkdir_dir_list)
