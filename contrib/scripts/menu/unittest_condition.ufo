/**
 * @brief Unittest for conditions
 * Move it into the ui ufo script directory (/base/ufos/ui/), run the game, and run the command "mn_push unittest_condition"
 * Every thing must be green and it must not print any text or warning into the console.
 */

window unittest_condition
{
	{
		pos "100 100"
		size "340 340"
		dragbutton	true
		closebutton	true
		string		"_Unittest condition"
		bgcolor		"0 0 0 1"
	}

	string floatTitle {
		pos		"20 40"
		string	"float"
	}

	string testFloat1 {
		pos		"20 60"
		string	"t1"
	}

	string testFloat2 {
		pos		"20 80"
		string	"t2"
	}

	string testFloat3 {
		pos		"20 100"
		string	"t3"
	}

	string testFloat4 {
		pos		"20 120"
		string	"t4"
	}

	string testFloat5 {
		pos		"20 140"
		string	"t5"
	}

	string testFloat6 {
		pos		"20 160"
		string	"t6"
	}

	string testFloat7 {
		pos		"20 180"
		string	"t7"
	}

	string testFloat8 {
		pos		"20 200"
		string	"t8"
	}

	string testFloat9 {
		pos		"20 220"
		string	"t9"
	}

	string testFloat10 {
		pos		"20 240"
		string	"t10"
	}
	
	string stringTitle {
		pos		"80 40"
		string	"string"
	}

	string testString1 {
		pos		"80 60"
		string	"t1"
	}

	string testString2 {
		pos		"80 80"
		string	"t2"
	}

	string testString3 {
		pos		"80 100"
		string	"t3"
	}

	string testString4 {
		pos		"80 120"
		string	"t4"
	}

	string testString5 {
		pos		"80 140"
		string	"t5"
	}

	string existsTitle {
		pos		"140 40"
		string	"exists"
	}

	string testExists1 {
		pos		"140 60"
		string	"t1"
	}

	string testExists2 {
		pos		"140 80"
		string	"t2"
	}

	string nodeTitle {
		pos		"200 40"
		string	"node"
	}

	string testNode1 {
		pos		"200 60"
		string	"t1"
	}

	string testNode2 {
		pos		"200 80"
		string	"t2"
	}

	string testNode3 {
		pos		"200 100"
		string	"t3"
	}

	string testNode4 {
		pos		"200 120"
		string	"t4"
	}

	string testNode5 {
		pos		"200 140"
		string	"t5"
	}

	string testNode6 {
		pos		"200 160"
		string	"t6"
	}

	string testNode7 {
		pos		"200 180"
		string	"t7"
	}

	string testNode8 {
		pos		"200 200"
		string	"t8"
	}

	string testNode9 {
		pos		"200 220"
		string	"t9"
	}

	string testNode10 {
		pos		"200 240"
		string	"t10"
	}

	string testNode11 {
		pos		"200 260"
		string	"t11"
	}

	string testNode12 {
		pos		"200 280"
		string	"t12"
	}

	string testNode13 {
		pos		"200 300"
		string	"t13"
	}

	string controlTitle {
		pos		"260 40"
		string	"control"
	}

	string testControl1 {
		pos		"260 60"
		string	"t1"
	}

	string testControl2 {
		pos		"260 80"
		string	"t2"
	}

	string testControl3 {
		pos		"260 100"
		string	"t3"
	}

	string testControl4 {
		pos		"260 120"
		string	"t4"
	}

	string testControl5 {
		pos		"260 140"
		string	"t5"
	}

	spinner testNodeFoo {
		current		"*cvar:test_nodefoo"
		min			0
		max			16
		invis		true
		disabled	false
	}
	
	string testNodeFooString {
		invis		true
		string		"aaabbb"
	}
	
	string testNodeFooString2 {
		invis		true
		string		"aaabbbccc"
	}

	spinner testNodeFoo2 {
		{
			current		"*cvar:test_nodefoo"
			min			0
			max			16
			invis		true
			disabled	false
		}
		
		confunc unittest_testRelativeConditions {
			if ( *node:this.parent@current == 1 ) { *testNode6@color "0 1 0 1" }
			else { *testNode6@color "1 0 0 1" }
			if ( 1 == *node:parent@current ) { *testNode7@color "0 1 0 1" }
			else { *testNode7@color "1 0 0 1" }
			if ( *node:this.root.testNodeFoo2@max == 16 ) { *testNode8@color "0 1 0 1" }
			else { *testNode8@color "1 0 0 1" }
			if ( *node:root.testNodeFoo2@invis == 1 ) { *testNode9@color "0 1 0 1" }
			else { *testNode9@color "1 0 0 1" }
			if ( *node:this.parent.parent.testNodeFoo2.root.testNodeFoo2@disabled == 0 ) { *testNode10@color "0 1 0 1" }
			else { *testNode10@color "1 0 0 1" }
		}
	}
	
	confunc unittest_testNodeProperty {
		if ( *node:unittest_condition.testNodeFoo@current == 1 ) { *testNode1@color "0 1 0 1" }
		else { *testNode1@color "1 0 0 1" }
		if ( 1 == *node:unittest_condition.testNodeFoo@current ) { *testNode2@color "0 1 0 1" }
		else { *testNode2@color "1 0 0 1" }
		if ( *node:unittest_condition.testNodeFoo@max == 16 ) { *testNode3@color "0 1 0 1" }
		else { *testNode3@color "1 0 0 1" }
		if ( *node:unittest_condition.testNodeFoo@invis == 1 ) { *testNode4@color "0 1 0 1" }
		else { *testNode4@color "1 0 0 1" }
		if ( *node:unittest_condition.testNodeFoo@disabled == 0 ) { *testNode5@color "0 1 0 1" }
		else { *testNode5@color "1 0 0 1" }

		cmd "unittest_testRelativeConditions"
		cmd "echo node:root.testNodeFooString@string <node:root.testNodeFooString@string>" 
		cmd "echo node:root.testNodeFooString2@string <node:root.testNodeFooString2@string>" 

		if ( *node:root.testNodeFooString@string eq aaabbb ) { *testNode11@color "0 1 0 1" }
		else { *testNode11@color "1 0 0 1" }
		if ( *node:root.testNodeFooString2@string ne aaabbbcc ) { *testNode12@color "0 1 0 1" }
		else { *testNode12@color "1 0 0 1" }
		if ( aaabbb eq *node:root.testNodeFooString@string ) { *testNode13@color "0 1 0 1" }
		else { *testNode13@color "1 0 0 1" }
		/* @todo test string with space */
	}
	
	confunc unittest_testIfControl {
		/* if condition */
		if ( 0 == 0 ) { *testControl1@color "0 1 0 1" }
		elif ( 0 == 1 ) { *testControl1@color "1 0 0 1" }
		elif ( 0 == 1 ) { *testControl1@color "1 0 0 1" }
		elif ( 0 == 1 ) { *testControl1@color "1 0 0 1" }
		else { *testControl1@color "1 0 0 1" }

		/* first elif condition */
		if ( 0 == 1 ) { *testControl2@color "1 0 0 1" }
		elif ( 0 == 0 ) { *testControl2@color "0 1 0 1" }
		elif ( 0 == 1 ) { *testControl2@color "1 0 0 1" }
		elif ( 0 == 1 ) { *testControl2@color "1 0 0 1" }
		else { *testControl2@color "1 0 0 1" }

		/* mid elif condition */
		if ( 0 == 1 ) { *testControl3@color "1 0 0 1" }
		elif ( 0 == 1 ) { *testControl3@color "1 0 0 1" }
		elif ( 0 == 0 ) { *testControl3@color "0 1 0 1" }
		elif ( 0 == 1 ) { *testControl3@color "1 0 0 1" }
		else { *testControl3@color "1 0 0 1" }

		/* last elif condition */
		if ( 0 == 1 ) { *testControl4@color "1 0 0 1" }
		elif ( 0 == 1 ) { *testControl4@color "1 0 0 1" }
		elif ( 0 == 1 ) { *testControl4@color "1 0 0 1" }
		elif ( 0 == 0 ) { *testControl4@color "0 1 0 1" }
		else { *testControl4@color "1 0 0 1" }

		/* else condition */
		if ( 0 == 1 ) { *testControl5@color "1 0 0 1" }
		elif ( 0 == 1 ) { *testControl5@color "1 0 0 1" }
		elif ( 0 == 1 ) { *testControl5@color "1 0 0 1" }
		elif ( 0 == 1 ) { *testControl5@color "1 0 0 1" }
		else { *testControl5@color "0 1 0 1" }
	}
	
	func onInit {
		*cvar:test_float0 "0"
		*cvar:test_float1 "1"
		*cvar:test_float0-2 "0"
		*cvar:test_float314 "3.14"

		/* const const */
		if ( 0 == 0 ) { *testFloat1@color "0 1 0 1" }
		else { *testFloat1@color "1 0 0 1" }
		if ( 0 == 1 ) { *testFloat2@color "1 0 0 1" }
		else { *testFloat2@color "0 1 0 1" }
		if ( 0 < 1 ) { *testFloat3@color "0 1 0 1" }
		else { *testFloat3@color "1 0 0 1" }
		if ( -1 < 0 ) { *testFloat4@color "0 1 0 1" }
		else { *testFloat4@color "1 0 0 1" }

		/* cvar const */
		if ( *cvar:test_float0 == 0 ) { *testFloat5@color "0 1 0 1" }
		else { *testFloat5@color "1 0 0 1" }
		if ( *cvar:test_float314 > 0 ) { *testFloat6@color "0 1 0 1" }
		else { *testFloat6@color "1 0 0 1" }
		if ( 0 <= *cvar:test_float314 ) { *testFloat7@color "0 1 0 1" }
		else { *testFloat7@color "1 0 0 1" }
		if ( 3.14 == *cvar:test_float314 ) { *testFloat8@color "0 1 0 1" }
		else { *testFloat8@color "1 0 0 1" }

		/* cvar cvar */
		if ( *cvar:test_float0 != *cvar:test_float1 ) { *testFloat9@color "0 1 0 1" }
		else { *testFloat9@color "1 0 0 1" }
		if ( *cvar:test_float0 == *cvar:test_float0-2 ) { *testFloat10@color "0 1 0 1" }
		else { *testFloat10@color "1 0 0 1" }

		*cvar:test_string1 "aaaa"
		*cvar:test_string2 "aaaa"
		*cvar:test_string3 "bbbbbbbb"
		
		if ( 0 eq 0 ) { *testString1@color "0 1 0 1" }
		else { *testString1@color "1 0 0 1" }
		if ( 0 eq 1 ) { *testString2@color "1 0 0 1" }
		else { *testString2@color "0 1 0 1" }
		if ( *cvar:test_string1 ne aaa ) { *testString3@color "0 1 0 1" }
		else { *testString3@color "1 0 0 1" }
		if ( *cvar:test_string1 eq *cvar:test_string2 ) { *testString4@color "0 1 0 1" }
		else { *testString4@color "1 0 0 1" }
		if ( *cvar:test_string1 ne *cvar:test_string3 ) { *testString5@color "0 1 0 1" }
		else { *testString5@color "1 0 0 1" }

		*cvar:test_exists "aaaa"

		if ( *cvar:test_exists ) { *testExists1@color "0 1 0 1" }
		else { *testExists1@color "1 0 0 1" }
		if ( *cvar:test_not_exists ) { *testExists2@color "1 0 0 1" }
		else { *testExists2@color "0 1 0 1" }
		
		*cvar:test_nodefoo 1
		
		cmd "unittest_testNodeProperty"
		cmd "unittest_testIfControl"
	}

	func onClose {
		cmd "del test_float0"
		cmd "del test_float0-2"
		cmd "del test_float314"
		cmd "del test_string1"
		cmd "del test_string2"
		cmd "del test_string3"
		cmd "del test_exists"
		cmd "del test_nodefoo"
	}

}