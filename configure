#!/bin/bash

#set -e
#set -x

CONFIG_H=config.h
MAKEFILE_LOCAL=Makefile.local

DEBUG=1
UNIVERSAL=
HARD_LINKED_GAME=
PARANOID=
PKGDATADIR=
PKGLIBDIR=
LOCALEDIR=
USE_SIGNALS=1
MODE=
PREFIX=
CROSS=
CC=${CC:-gcc}

HOST_OS=$(uname | sed -e s/_.*// | tr '[:upper:]' '[:lower:]')
TARGET_OS=${HOST_OS}

if [ "${HOST_OS}" = "sunos" ] || [ "${HOST_OS}" = "darwin" ]; then
	TARGET_ARCH=$(uname -p | sed -e s/i.86/i386/)
else
	TARGET_ARCH=$(uname -m | sed -e s/i.86/i386/)
fi

add_line_to_makefile_local() {
	makefile_local_data="${makefile_local_data}"'
'"$1"
}

add_to_makefile_local_quote() {
	VALUE=$(get_var $1)
	if [ -n "$VALUE" ]; then
		add_line_to_makefile_local "$1 ?= \"$VALUE\""
		[ -n "$2" ] && echo $2
	else
		add_line_to_makefile_local "# $1 ?= \"$VALUE\""
		[ -n "$3" ] && echo $3
		[ "$4" = "yes" ] && exit 1
	fi
}

add_to_makefile_local() {
	VALUE=$(get_var $1)
	if [ -n "$VALUE" ]; then
		add_line_to_makefile_local "$1 ?= $VALUE"
		[ -n "$2" ] && echo $2
	else
		add_line_to_makefile_local "# $1 ?= $VALUE"
		[ -n "$3" ] && echo $3
		[ "$4" = "yes" ] && exit 1
	fi
}

add_line_to_config_h() {
	config_h_data="${config_h_data}"'
'"$1"
}

add_to_config_h_quote() {
	VALUE=$(get_var $1)
	if [ -n "$VALUE" ]; then
		add_line_to_config_h "#define $1 \"$VALUE\""
		[ -n "$2" ] && echo $2
	else
		add_line_to_config_h "/* #define $1 \"$VALUE\" */"
		[ -n "$3" ] && echo $3
		[ "$4" = "yes" ] && exit 1
	fi
}

add_to_config_h() {
	VALUE=$(get_var $1)
	if [ -n "$VALUE" ] && [ "$VALUE" != "no" ]; then
		add_line_to_config_h "#define $1 $VALUE"
		[ -n "$2" ] && echo $2
	else
		add_line_to_config_h "/* #define $1 $VALUE */"
		[ -n "$3" ] && echo $3
		[ "$4" = "yes" ] && exit 1
	fi
}

config_h() {
	add_to_config_h DEBUG "Debug build"
	add_to_config_h PARANOID "Enable paranoid build"
	add_to_config_h HARD_LINKED_GAME "Enable hard linked game"
	add_to_config_h USE_SIGNALS "Use signal handler"
	add_to_config_h_quote PKGDATADIR "Setting custom data directory"
	add_to_config_h_quote PKGLIBDIR "Setting custom library directory"
	add_to_config_h_quote LOCALEDIR "Setting custom locale directory"
}

makefile_local() {
	add_to_makefile_local DEBUG
	add_to_makefile_local HARD_LINKED_GAME
	add_to_makefile_local UNIVERSAL "Build a universal binary"
	add_to_makefile_local TARGET_OS "Compile for ${TARGET_OS}"
	add_to_makefile_local TARGET_ARCH "Compile for ${TARGET_ARCH}"
	add_to_makefile_local MODE
	add_to_makefile_local CC
	add_to_makefile_local CROSS
	add_to_makefile_local_quote PKGDATADIR
	add_to_makefile_local_quote PKGLIBDIR
	add_to_makefile_local_quote LOCALEDIR
	add_to_makefile_local_quote PREFIX

	echo "Build modules:"
	for i in $(get_modules); do
		add_to_makefile_local ${i}_DISABLE "Build $i" "Disable $i"
	done
}

check_header_cc() {
	( echo "#include <${1}>" | ${CC} ${CFLAGS} -o /dev/null -xc -c - 2> /dev/null ) && echo "1" || echo ""
}

check_header() {
	HEADER=$1
	HAVE=HAVE_$(echo ${HEADER%.*} | sed 's,/,_,g' | tr '[a-z]' '[A-Z]')_H
	VALUE=$(get_var $HAVE)
	if [ "$VALUE" != "no" ]; then
		set_var $HAVE $(check_header_cc $1)
		add_to_config_h $HAVE "Found $1" "Could not find $1" $2
	else
		add_to_config_h $HAVE "Found $1" "Disable $1"
	fi
}

check_headers() {
	check_header "xvid.h"
	check_header "theora/theora.h"
	check_header "execinfo.h"
}

usage() {
	echo "Usage: $0"
	echo " --help                   show this help message"
	echo " --enable-release         build with optimizations"
	echo " --enable-universal       enable universal build"
	echo " --enable-hardlinkedgame  hard link the server game code"
	echo " --enable-paranoid        compile in paranoid mode with extra checks"
	echo " --disable-signals        disable the use of a signal handler"
	echo " --disable-execinfo       disable backtraces for crashes"
	echo " --prefix=                prefix for directories"
	echo " --data-dir=              path for the ufoai game data"
	echo " --lib-dir=               path for the ufoai shared objects"
	echo " --locale-dir=            path for the ufoai translations"
	echo " --target-os=             specify the target os"
	for i in $(ls build/platforms/*.mk); do
		echo "  * $(basename $i .mk)"
	done
	echo " --disable-*              specify which target should not get build"
	for i in $(ls build/modules/*.mk); do
		echo "  * $(basename $i .mk)"
	done
	exit 1
}

set_var() {
	VAR=$(echo ${1} | sed 's/-/_/g')
	eval ${VAR}='${2}'
}

get_var() {
	VAR=$(echo ${1} | sed 's/-/_/g')
	eval echo "\${${VAR}}"
}

get_option() {
	echo `echo $@ | cut -d '=' -f 2`
}

get_option_disable() {
	echo `echo $@ | cut -c 11-`
}

get_modules() {
	for i in $(ls build/modules/*.mk); do
		echo $(basename $i .mk)
	done
}

while [ $# -gt 0 ]; do
	case "$1" in
	--help|-h)
		usage
		;;
	--enable-release)
		MODE=release
		DEBUG=
		;;
	--enable-universal)
		UNIVERSAL=1
		;;
	--enable-hardlinkedgame)
		HARD_LINKED_GAME=1
		;;
	--enable-paranoid)
		PARANOID=1
		;;
	--disable-signals)
		USE_SIGNALS=
		;;
	--disable-execinfo)
		HAVE_EXECINFO_H=no
		;;
	--prefix=*)
		PREFIX=$(get_option $1)
		;;
	--data-dir=*)
		PKGDATADIR=$(get_option $1)
		;;
	--lib-dir=*)
		PKGLIBDIR=$(get_option $1)
		;;
	--locale-dir=*)
		LOCALEDIR=$(get_option $1)
		;;
	--target-os=*)
		TARGET_OS=$(get_option $1)
		;;
	--disable-*)
		OPTION=$(get_option_disable $1)
		set_var "${OPTION}_DISABLE" "yes"
		;;
	*)
		echo "invalid option $1"
		exit 1
		;;
	esac
	shift
done

if [ "${TARGET_OS}" = "mingw32" ] && [ "${HOST_OS}" != "mingw32" ]; then
	CROSS="i686-pc-mingw32-"
fi

[ "${TARGET_OS}" = "mingw32" ] && ( HAVE_EXECINFO_H=no )
[ "${TARGET_OS}" = "darwin" ] && ( USE_SIGNALS= )

makefile_local
config_h
check_headers

cat > ${MAKEFILE_LOCAL} << EOF
# -------- Automatically generated -----------
$makefile_local_data
EOF

cat > ${CONFIG_H} << EOF
/* This file is automatically generated */
#ifndef CONFIG_H
#define CONFIG_H
$config_h_data

#endif
EOF
